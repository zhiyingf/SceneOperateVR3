//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Valve.VR
{
    using System;
    using UnityEngine;
    
    
    public partial class SteamVR_Actions
    {
        
        private static SteamVR_Action_Boolean p_default_InteractUI;
        
        private static SteamVR_Action_Boolean p_default_Teleport;
        
        private static SteamVR_Action_Pose p_default_Pose;
        
        private static SteamVR_Action_Vibration p_default_Haptic;
        
        private static SteamVR_Action_Vector2 p_platformer_Move;
        
        private static SteamVR_Action_Boolean p_platformer_Jump;
        
        private static SteamVR_Action_Vector2 p_buggy_Steering;
        
        private static SteamVR_Action_Single p_buggy_Throttle;
        
        private static SteamVR_Action_Boolean p_buggy_Brake;
        
        private static SteamVR_Action_Boolean p_buggy_Reset;
        
        private static SteamVR_Action_Pose p_mixedreality_ExternalCamera;
        
        private static SteamVR_Action_Boolean p_sceneoperate_Grab;
        
        private static SteamVR_Action_Boolean p_sceneoperate_Union;
        
        private static SteamVR_Action_Boolean p_sceneoperate_Delete;
        
        private static SteamVR_Action_Boolean p_sceneoperate_Update;
        
        private static SteamVR_Action_Boolean p_sceneoperate_Editor;
        
        private static SteamVR_Action_Boolean p_sceneoperate_SelectMenu;
        
        private static SteamVR_Action_Boolean p_sceneoperate_SaveMesh;
        
        private static SteamVR_Action_Boolean p_sceneoperate_Intersection;
        
        private static SteamVR_Action_Boolean p_sceneoperate_Subtract;
        
        private static SteamVR_Action_Pose p_sceneoperate_Pose;
        
        private static SteamVR_Action_Boolean p_sceneoperate_InteractUI;
        
        private static SteamVR_Action_Vibration p_sceneoperate_Haptic;
        
        public static SteamVR_Action_Boolean default_InteractUI
        {
            get
            {
                return SteamVR_Actions.p_default_InteractUI.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_Teleport
        {
            get
            {
                return SteamVR_Actions.p_default_Teleport.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose default_Pose
        {
            get
            {
                return SteamVR_Actions.p_default_Pose.GetCopy<SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Vibration default_Haptic
        {
            get
            {
                return SteamVR_Actions.p_default_Haptic.GetCopy<SteamVR_Action_Vibration>();
            }
        }
        
        public static SteamVR_Action_Vector2 platformer_Move
        {
            get
            {
                return SteamVR_Actions.p_platformer_Move.GetCopy<SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean platformer_Jump
        {
            get
            {
                return SteamVR_Actions.p_platformer_Jump.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 buggy_Steering
        {
            get
            {
                return SteamVR_Actions.p_buggy_Steering.GetCopy<SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Single buggy_Throttle
        {
            get
            {
                return SteamVR_Actions.p_buggy_Throttle.GetCopy<SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean buggy_Brake
        {
            get
            {
                return SteamVR_Actions.p_buggy_Brake.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean buggy_Reset
        {
            get
            {
                return SteamVR_Actions.p_buggy_Reset.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose mixedreality_ExternalCamera
        {
            get
            {
                return SteamVR_Actions.p_mixedreality_ExternalCamera.GetCopy<SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Boolean sceneoperate_Grab
        {
            get
            {
                return SteamVR_Actions.p_sceneoperate_Grab.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean sceneoperate_Union
        {
            get
            {
                return SteamVR_Actions.p_sceneoperate_Union.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean sceneoperate_Delete
        {
            get
            {
                return SteamVR_Actions.p_sceneoperate_Delete.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean sceneoperate_Update
        {
            get
            {
                return SteamVR_Actions.p_sceneoperate_Update.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean sceneoperate_Editor
        {
            get
            {
                return SteamVR_Actions.p_sceneoperate_Editor.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean sceneoperate_SelectMenu
        {
            get
            {
                return SteamVR_Actions.p_sceneoperate_SelectMenu.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean sceneoperate_SaveMesh
        {
            get
            {
                return SteamVR_Actions.p_sceneoperate_SaveMesh.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean sceneoperate_Intersection
        {
            get
            {
                return SteamVR_Actions.p_sceneoperate_Intersection.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean sceneoperate_Subtract
        {
            get
            {
                return SteamVR_Actions.p_sceneoperate_Subtract.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose sceneoperate_Pose
        {
            get
            {
                return SteamVR_Actions.p_sceneoperate_Pose.GetCopy<SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Boolean sceneoperate_InteractUI
        {
            get
            {
                return SteamVR_Actions.p_sceneoperate_InteractUI.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vibration sceneoperate_Haptic
        {
            get
            {
                return SteamVR_Actions.p_sceneoperate_Haptic.GetCopy<SteamVR_Action_Vibration>();
            }
        }
        
        private static void InitializeActionArrays()
        {
            Valve.VR.SteamVR_Input.actions = new Valve.VR.SteamVR_Action[] {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.mixedreality_ExternalCamera,
                    SteamVR_Actions.sceneoperate_Grab,
                    SteamVR_Actions.sceneoperate_Union,
                    SteamVR_Actions.sceneoperate_Delete,
                    SteamVR_Actions.sceneoperate_Update,
                    SteamVR_Actions.sceneoperate_Editor,
                    SteamVR_Actions.sceneoperate_SelectMenu,
                    SteamVR_Actions.sceneoperate_SaveMesh,
                    SteamVR_Actions.sceneoperate_Intersection,
                    SteamVR_Actions.sceneoperate_Subtract,
                    SteamVR_Actions.sceneoperate_Pose,
                    SteamVR_Actions.sceneoperate_InteractUI,
                    SteamVR_Actions.sceneoperate_Haptic};
            Valve.VR.SteamVR_Input.actionsIn = new Valve.VR.ISteamVR_Action_In[] {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.mixedreality_ExternalCamera,
                    SteamVR_Actions.sceneoperate_Grab,
                    SteamVR_Actions.sceneoperate_Union,
                    SteamVR_Actions.sceneoperate_Delete,
                    SteamVR_Actions.sceneoperate_Update,
                    SteamVR_Actions.sceneoperate_Editor,
                    SteamVR_Actions.sceneoperate_SelectMenu,
                    SteamVR_Actions.sceneoperate_SaveMesh,
                    SteamVR_Actions.sceneoperate_Intersection,
                    SteamVR_Actions.sceneoperate_Subtract,
                    SteamVR_Actions.sceneoperate_Pose,
                    SteamVR_Actions.sceneoperate_InteractUI};
            Valve.VR.SteamVR_Input.actionsOut = new Valve.VR.ISteamVR_Action_Out[] {
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.sceneoperate_Haptic};
            Valve.VR.SteamVR_Input.actionsVibration = new Valve.VR.SteamVR_Action_Vibration[] {
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.sceneoperate_Haptic};
            Valve.VR.SteamVR_Input.actionsPose = new Valve.VR.SteamVR_Action_Pose[] {
                    SteamVR_Actions.default_Pose,
                    SteamVR_Actions.mixedreality_ExternalCamera,
                    SteamVR_Actions.sceneoperate_Pose};
            Valve.VR.SteamVR_Input.actionsBoolean = new Valve.VR.SteamVR_Action_Boolean[] {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.sceneoperate_Grab,
                    SteamVR_Actions.sceneoperate_Union,
                    SteamVR_Actions.sceneoperate_Delete,
                    SteamVR_Actions.sceneoperate_Update,
                    SteamVR_Actions.sceneoperate_Editor,
                    SteamVR_Actions.sceneoperate_SelectMenu,
                    SteamVR_Actions.sceneoperate_SaveMesh,
                    SteamVR_Actions.sceneoperate_Intersection,
                    SteamVR_Actions.sceneoperate_Subtract,
                    SteamVR_Actions.sceneoperate_InteractUI};
            Valve.VR.SteamVR_Input.actionsSingle = new Valve.VR.SteamVR_Action_Single[] {
                    SteamVR_Actions.buggy_Throttle};
            Valve.VR.SteamVR_Input.actionsVector2 = new Valve.VR.SteamVR_Action_Vector2[] {
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.buggy_Steering};
            Valve.VR.SteamVR_Input.actionsVector3 = new Valve.VR.SteamVR_Action_Vector3[0];
            Valve.VR.SteamVR_Input.actionsSkeleton = new Valve.VR.SteamVR_Action_Skeleton[0];
            Valve.VR.SteamVR_Input.actionsNonPoseNonSkeletonIn = new Valve.VR.ISteamVR_Action_In[] {
                    SteamVR_Actions.default_InteractUI,
                    SteamVR_Actions.default_Teleport,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.sceneoperate_Grab,
                    SteamVR_Actions.sceneoperate_Union,
                    SteamVR_Actions.sceneoperate_Delete,
                    SteamVR_Actions.sceneoperate_Update,
                    SteamVR_Actions.sceneoperate_Editor,
                    SteamVR_Actions.sceneoperate_SelectMenu,
                    SteamVR_Actions.sceneoperate_SaveMesh,
                    SteamVR_Actions.sceneoperate_Intersection,
                    SteamVR_Actions.sceneoperate_Subtract,
                    SteamVR_Actions.sceneoperate_InteractUI};
        }
        
        private static void PreInitActions()
        {
            SteamVR_Actions.p_default_InteractUI = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/InteractUI")));
            SteamVR_Actions.p_default_Teleport = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/Teleport")));
            SteamVR_Actions.p_default_Pose = ((SteamVR_Action_Pose)(SteamVR_Action.Create<SteamVR_Action_Pose>("/actions/default/in/Pose")));
            SteamVR_Actions.p_default_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create<SteamVR_Action_Vibration>("/actions/default/out/Haptic")));
            SteamVR_Actions.p_platformer_Move = ((SteamVR_Action_Vector2)(SteamVR_Action.Create<SteamVR_Action_Vector2>("/actions/platformer/in/Move")));
            SteamVR_Actions.p_platformer_Jump = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/platformer/in/Jump")));
            SteamVR_Actions.p_buggy_Steering = ((SteamVR_Action_Vector2)(SteamVR_Action.Create<SteamVR_Action_Vector2>("/actions/buggy/in/Steering")));
            SteamVR_Actions.p_buggy_Throttle = ((SteamVR_Action_Single)(SteamVR_Action.Create<SteamVR_Action_Single>("/actions/buggy/in/Throttle")));
            SteamVR_Actions.p_buggy_Brake = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/buggy/in/Brake")));
            SteamVR_Actions.p_buggy_Reset = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/buggy/in/Reset")));
            SteamVR_Actions.p_mixedreality_ExternalCamera = ((SteamVR_Action_Pose)(SteamVR_Action.Create<SteamVR_Action_Pose>("/actions/mixedreality/in/ExternalCamera")));
            SteamVR_Actions.p_sceneoperate_Grab = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/sceneoperate/in/Grab")));
            SteamVR_Actions.p_sceneoperate_Union = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/sceneoperate/in/Union")));
            SteamVR_Actions.p_sceneoperate_Delete = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/sceneoperate/in/Delete")));
            SteamVR_Actions.p_sceneoperate_Update = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/sceneoperate/in/Update")));
            SteamVR_Actions.p_sceneoperate_Editor = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/sceneoperate/in/Editor")));
            SteamVR_Actions.p_sceneoperate_SelectMenu = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/sceneoperate/in/SelectMenu")));
            SteamVR_Actions.p_sceneoperate_SaveMesh = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/sceneoperate/in/SaveMesh")));
            SteamVR_Actions.p_sceneoperate_Intersection = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/sceneoperate/in/Intersection")));
            SteamVR_Actions.p_sceneoperate_Subtract = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/sceneoperate/in/Subtract")));
            SteamVR_Actions.p_sceneoperate_Pose = ((SteamVR_Action_Pose)(SteamVR_Action.Create<SteamVR_Action_Pose>("/actions/sceneoperate/in/Pose")));
            SteamVR_Actions.p_sceneoperate_InteractUI = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/sceneoperate/in/InteractUI")));
            SteamVR_Actions.p_sceneoperate_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create<SteamVR_Action_Vibration>("/actions/sceneoperate/out/Haptic")));
        }
    }
}
